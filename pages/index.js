import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import { getServerSession } from "next-auth/next";
import { useSession } from "next-auth/react";
import { authOptions } from "./api/auth/[...nextauth]";
import { signOut } from "next-auth/react";
import { useEffect, useState } from "react";
import { io } from "socket.io-client";
const inter = Inter({ subsets: ["latin"] });
let socket;
export default function Home({ sessionData }) {
  const session = JSON.parse(sessionData);
  const [messages, setMessages] = useState("")

  const handleSocket = async ()=>{
    const response =  fetch('/api/socket')
    
    socket = io()
    socket.once('connect', ()=>{
      console.log("Client connected")
    })

    socket.on('message', msg=>{
      setMessages(...messages, msg)
    })
  }
  useEffect( () => {
  handleSocket()
  },[])

  const handleMessage = (e)=>{
    e.preventDefault()
    const msg = e.target.messageInput.value;
    setMessages([...messages, msg]);
    socket.emit('message', msg);
  }
  
  console.log("test",messages);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="fixed top-0 left-0 ">
          <img src={session.user.image} className="rounded-md"></img>
          <button className="btn my-2" onClick={()=>signOut()}> Sign-out</button>

        </div>
        <div className=" h-screen w-screen flex justify-center items-center">
        </div>
        <div className="flex justify-center items-center">
          <div className="fixed bottom-0 mb-[12rem] ">

            <form className="form-control" onSubmit={handleMessage}>
            <input id="messageInput" name="messageInput" type="text" placeholder="Type here" class="h-auto min-h-12 input w-[50rem]" />
            </form>
          </div>
        </div>
        
      </main>
    </>
  );
}

export async function getServerSideProps(context) {
  const session = await getServerSession(context.req, context.res, authOptions);
  const sessionData = JSON.stringify(session);

  if (!session) {
    return {
      redirect: {
        destination: "/signin",
        permanent: false,
      },
    };
  }
  return {
    props: { sessionData },
  };
}
